/* Побітові операції
* 
* Побітові оператори - оператори, що дозволяють виконувати операції над конкретними бітами.
*
*/

#include <iostream>
#include <Windows.h>

using namespace std;

// Структура з бітовими полями
struct fieldbite
{
    unsigned char field1 : 2;
    unsigned char field2 : 2;
    unsigned char field3 : 4;
} field; // розмір: 1 байт

int main()
{
    SetConsoleOutputCP(1251);

    cout << "| Побітові операції |\n";

    unsigned short x = 10;
    unsigned short y = 25;

    cout << "Побітовий зсув числа 10: \n";
    // 0000 0000 0000 1010 >> 0000 0000 0000 0101 (5)
    cout << "Праворуч (>>) на 1 біт: " << (x >> 1) << '\n';
    // 0000 0000 0000 1010 << 0000 0000 0001 0100 (20)
    cout << "Ліворуч (<<) на 1 біт: " << (x << 1) << '\n';

    cout << "\n-----------------------------\n\n";

    cout << "Побітове заперечення (інверсія) числа 10: ";
    // 0000 0000 0000 1010 -> 1111 1111 1111 0101 (-11)
    cout << (~x) << '\n';

    cout << "\n-----------------------------\n\n";

    cout << "Побітове АБО (|) чисел 10 та 25: ";
    // 0000 0000 0000 1010 (10)
    // 0000 0000 0001 1001 (25)
    // 0000 0000 0001 1011 (27)
    cout << (x | y) << '\n';

    cout << "\n-----------------------------\n\n";
    
    cout << "Побітове виключне АБО (^) чисел 10 та 25: ";
    // 0000 0000 0000 1010 (10)
    // 0000 0000 0001 1001 (25)
    // 0000 0000 0001 0011 (19)
    cout << (x ^ y) << '\n';

    cout << "\n-----------------------------\n\n";

    cout << "Побітове І (&) чисел 10 та 25: ";
    // 0000 0000 0000 1010 (10)
    // 0000 0000 0001 1001 (25)
    // 0000 0000 0000 1000 (8)
    cout << (x & y) << '\n';

    cout << "\n-----------------------------\n\n";

    cout << "Розмір структури з бітовими полями: ";
    cout << sizeof(field) << '\n';

    cout << "\n-----------------------------\n\n";

    cout << "Обмін двох змінних місцями без використання додаткової змінної: \n";

    // a = 0101
    // b = 1001
    int a = 5, b = 9;

    cout << "До обміну: \n";
    cout << "a: " << a << '\n';
    cout << "b: " << b << '\n';

    a = a ^ b; // 0101 ^ 1001 = 1100
    b = a ^ b; // 1100 ^ 1001 = 0101 (5)
    a = a ^ b; // 1100 ^ 0101 = 1001 (9)

    cout << "Після обміну: \n";
    cout << "a: " << a << '\n';
    cout << "b: " << b << '\n';

    cout << "\n-----------------------------\n\n";

    cout << "Перевірка парності числа за допомогою побітової операції AND:\n";

    cout << "Число: " << x << '\n';

    // Побітово перевіряємо останній біт
    // Якщо x & 1 == 1 → число непарне
    // Якщо x & 1 == 0 → число парне

    if (x & 1)
        cout << "Це непарне число.\n";
    else
        cout << "Це парне число.\n";

    cout << "\n-----------------------------\n\n";

    cout << "Отримання 2 (індекс 1) біту числа 10: ";
    cout << ( (x & (1 << 1) ) != 0) << '\n';

}